{"version":3,"sources":["modules/Rooms/processData.ts","components/RoomsTable/RoomsTable.tsx","modules/Rooms/Rooms.tsx","hooks/useFetch.ts","layouts/Main/Main.tsx","App.tsx","index.tsx"],"names":["processData","data","agenda","Object","entries","areas","map","area","title","roomId","agendas","roomAgendaItem","find","item","startTime","Date","endTime","sort","a","b","reduce","accumulator","currentValue","date","toLocaleString","timeZone","year","month","day","collectRoomInfo","id","timeOptions","hour","minute","Slot","slotData","console","log","speaker","speakers","length","name","join","TableRow","TableCell","Typography","variant","component","RoomTable","roomData","roomDataEntries","Table","TableBody","entry","Fragment","RoomsTable","splittedRooms","rooms","room","roomName","TableContainer","Paper","TableHead","splRoom","idx","align","style","verticalAlign","Rooms","useState","undefined","processedData","setProcessedData","url1","url2","setData","loading","setLoading","error","setError","fetchData","useCallback","Promise","all","fetch","res1","res2","status","Error","json","data1","data2","url","message","useEffect","useFetch","color","CircularProgress","Main","Container","Box","mt","gutterBottom","App","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.571060bd.chunk.js","sourcesContent":["import {\r\n  RoomsServerData,\r\n  Agenda,\r\n  CollectedByDays,\r\n  CollectedRooms,\r\n} from './types';\r\n\r\nconst collectRoomInfo = (\r\n  roomId: number,\r\n  agendas: [string, Agenda[]][]\r\n): CollectedByDays => {\r\n  const roomAgendaItem = agendas.find((agenda) => roomId === +agenda[0]);\r\n\r\n  if (!roomAgendaItem) {\r\n    return {};\r\n  }\r\n\r\n  const roomAgenda = roomAgendaItem[1]\r\n    .map((item) => ({\r\n      ...item,\r\n      startTime: new Date(item.startTime),\r\n      endTime: new Date(item.endTime),\r\n    }))\r\n    .sort((a, b) => {\r\n      if (a.startTime > b.startTime) {\r\n        return 1;\r\n      }\r\n\r\n      if (a.startTime < b.startTime) {\r\n        return -1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n\r\n  const collectedByDays = roomAgenda.reduce<CollectedByDays>(\r\n    (accumulator, currentValue) => {\r\n      const date = currentValue.startTime.toLocaleString('ru', {\r\n        timeZone: 'UTC',\r\n        year: 'numeric',\r\n        month: 'numeric',\r\n        day: 'numeric',\r\n      });\r\n\r\n      return {\r\n        ...accumulator,\r\n        [date]: accumulator[date]\r\n          ? [...accumulator[date], currentValue]\r\n          : [currentValue],\r\n      };\r\n    },\r\n    {}\r\n  );\r\n\r\n  return collectedByDays;\r\n};\r\n\r\nexport const processData = (data: RoomsServerData): CollectedRooms => {\r\n  const agenda = Object.entries(data?.agenda);\r\n\r\n  const roomsData = data.areas.map((area) => ({\r\n    [area.title]: collectRoomInfo(area.id, agenda),\r\n  }));\r\n\r\n  return roomsData;\r\n};\r\n","import React, { FC } from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { Agenda } from 'modules/Rooms';\r\n\r\nimport { CollectedRooms } from 'modules/Rooms/types';\r\n\r\ninterface RoomsTableProps {\r\n  rooms: CollectedRooms;\r\n}\r\n\r\nconst timeOptions = {\r\n  hour: 'numeric',\r\n  minute: 'numeric',\r\n} as Intl.DateTimeFormatOptions;\r\n\r\nconst Slot: FC<{ slotData: Agenda }> = ({ slotData }) => {\r\n  console.log(slotData.startTime);\r\n\r\n  const startTime = slotData.startTime.toLocaleString('ru', timeOptions);\r\n  const endTime = slotData.endTime.toLocaleString('ru', timeOptions);\r\n  const speaker =\r\n    (slotData.speakers.length > 0 &&\r\n      slotData.speakers.map((item) => item.name).join(', ')) ||\r\n    '';\r\n\r\n  return (\r\n    <TableRow key={slotData.id}>\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" component=\"span\">\r\n          {startTime}\r\n        </Typography>{' '}\r\n        —\r\n        <Typography variant=\"subtitle2\" component=\"span\">\r\n          {endTime}\r\n        </Typography>\r\n        {'  '}\r\n        {slotData.name} {speaker && <>({speaker})</>}\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nconst RoomTable: FC<any> = ({ roomData }) => {\r\n  const roomDataEntries = Object.entries(roomData);\r\n\r\n  return (\r\n    <Table>\r\n      <TableBody>\r\n        {roomDataEntries.map((entry) => (\r\n          <React.Fragment key={entry[0]}>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Typography variant=\"h6\">{entry[0]}</Typography>\r\n              </TableCell>\r\n            </TableRow>\r\n            {(entry[1] as any[]).map((agenda) => (\r\n              <Slot key={agenda.id} slotData={agenda} />\r\n            ))}\r\n          </React.Fragment>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport const RoomsTable: FC<RoomsTableProps> = ({ rooms }) => {\r\n  const splittedRooms = rooms.map((room) => {\r\n    const roomName = Object.entries(room)[0][0];\r\n\r\n    return {\r\n      room: roomName,\r\n      agendas: room[roomName],\r\n    };\r\n  });\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {splittedRooms.map((splRoom) => (\r\n              <TableCell key={splRoom.room}>{splRoom.room}</TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        <TableBody>\r\n          <TableRow>\r\n            {splittedRooms.map((room, idx) => (\r\n              <TableCell\r\n                key={room.room}\r\n                align=\"justify\"\r\n                style={{ verticalAlign: 'top' }}\r\n              >\r\n                <RoomTable roomData={room.agendas} />\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { useFetch } from 'hooks/useFetch';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { processData } from './processData';\r\n\r\nimport { RoomsTable } from 'components/RoomsTable';\r\n\r\nexport const Rooms = () => {\r\n  const [processedData, setProcessedData] = useState<any>(undefined);\r\n\r\n  const { data, error, loading } = useFetch(\r\n    'https://dev.powerplace.online/api/v1/test/areas',\r\n    'https://dev.powerplace.online/api/v1/test/agenda'\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const processedData = processData(data);\r\n\r\n      setProcessedData(processedData);\r\n    }\r\n  }, [data]);\r\n\r\n  if (error) {\r\n    return (\r\n      <Typography variant=\"h5\" color=\"secondary\">\r\n        {error}\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return <CircularProgress />;\r\n  }\r\n\r\n  return <RoomsTable rooms={processedData} />;\r\n};\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nimport { RoomsServerData } from 'modules/Rooms';\r\n\r\nexport const useFetch = (\r\n  url1: string,\r\n  url2: string\r\n): {\r\n  data: RoomsServerData | undefined;\r\n  error: string;\r\n  loading: boolean;\r\n} => {\r\n  const [data, setData] = useState<RoomsServerData | undefined>(undefined);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string>('');\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      const [res1, res2] = await Promise.all([fetch(url1), fetch(url2)]);\r\n\r\n      if (res1.status !== 200 || res2.status !== 200) {\r\n        throw new Error('Ошибка сети!');\r\n      }\r\n\r\n      const data1 = await res1.json();\r\n      const data2 = await res2.json();\r\n\r\n      setData({\r\n        areas: res1.url === url1 ? data1 : data2,\r\n        agenda: res2.url === url2 ? data2 : data1,\r\n      });\r\n\r\n      setLoading(false);\r\n      setError('');\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setError(err.message);\r\n    }\r\n  }, [url1, url2]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  return { data, error, loading };\r\n};\r\n","import Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport { Rooms } from 'modules/Rooms';\r\n\r\nexport const Main = () => (\r\n  <Container>\r\n    <Box mt={2}>\r\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\r\n        Расписание\r\n      </Typography>\r\n      <Rooms />\r\n    </Box>\r\n  </Container>\r\n);\r\n","import { Main } from 'layouts/Main';\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}